##################
# GENERAL TWEAKS #
##################

# disable clippy ascii art
set global ui_options ncurses_assistant=off

# set info window
set -add global autoinfo normal

# line numbers
addhl global/ number-lines -hlcursor

# highlight matching
addhl global/ show-matching
set-face global MatchingChar white,black+b

# tabs as 4 chars
set-option global tabstop 4

# enable "soft" line wrap
addhl global/ wrap

# enable git support
hook global WinCreate .* %{
    git show-diff
}

# setup color
colorscheme base16-default-light

hook global BufWritePost .* %{
    git update-diff
}

# autocomplete using tab key
hook global InsertCompletionShow .* %{ map window insert <tab> <c-n> }
hook global InsertCompletionShow .* %{ map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n> }
hook global InsertCompletionHide .* %{ unmap window insert <s-tab> <c-p> }

# always remove trailing whitespace
hook global BufWritePre .* %{ try %{ execute-keys -draft \%s\h+$<ret>d } }

# highlight special comments
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb

#######################
# FILE-TYPE DEPENDENT #
#######################

# create shellscripting environment
hook global BufCreate APKBUILD %{
    set-option buffer filetype sh
}
hook global BufSetOption filetype=sh %{
    set buffer lintcmd "shellcheck -f gcc"
    hook buffer BufWritePost .* %{ lint }
    hook buffer InsertEnd .* %{ lint }
    hook buffer NormalIdle .* %{ lint }
    #set-option -add buffer auto_pairs if fi case esac
}

# create python development environment
hook global BufSetOption filetype=python %{
    set buffer formatcmd 'autopep8 - '
    #set buffer lintcmd 'flake8 --ignore=W191 --format="%(path)s:%(row)d:%(col)d: error: %(text)s"'
    #hook buffer BufWritePost .* %{ lint }
    #hook buffer InsertEnd .* %{ lint }
    #hook buffer NormalIdle .* %{ lint }
}
hook global WinSetOption filetype=python %{
    jedi-enable-autocomplete
}

# create c development environment
hook global BufSetOption filetype=c %{
    set buffer formatcmd 'indent -kr'
    clang-enable-autocomplete
    clang-enable-diagnostics
    set buffer clang_options '-std=c11 -Wall -Wextra -pedantic'
    alias buffer lint clang-parse
    alias buffer lint-next clang-diagnostics-next
    hook buffer BufWritePost .* %{ lint }
    hook buffer InsertEnd .* %{ lint }
    hook buffer NormalIdle .* %{ lint }
}

# set up markdown environment
hook global BufSetOption filetype=markdown %{
    # set word wrap
    add-highlighter buffer/wordwrap wrap -word
}

# set up html environment
hook global BufSetOption filetype=html %{
    set buffer formatcmd 'tidy5 -i -w 80 -utf8'
    set buffer tabstop 2
}

# set up js environment
#hook global BufSetOption filetype=javascript %{
#}

# set up verilog development environment
hook global BufSetOption filetype=verilog %{
    #set-option -add buffer auto-pairs module endmodule begin end task endtask
    # see the file in my ~/bin
    set-option matching_pairs -add buffer begin end
    set buffer lintcmd 'verilog_lint'
    lint
    hook buffer BufWritePost .* %{ lint }
    hook buffer InsertEnd .* %{ lint }
    hook buffer NormalIdle .* %{ lint }
}

# set up latex environment
hook global BufCreate .*\.tex %{
    set-option buffer filetype latex
}
hook global BufCreate .*\.latex %{
    set-option buffer filetype latex
}
hook global BufSetOption filetype=latex %{
    # don't wrap words around
    add-highlighter window/wordwrap wrap -word

    #set-option buffer makecmd 'latexmk -pdf -quiet'
    #set-option buffer makecmd 'pdflatex'
    set-option buffer lintcmd 'chklatex %f:%l:%c: %k: %n %m'
    set-option buffer formatcmd 'latexindent'

    hook bugger BufWritePost .* %{
        lint
#        make
    }
}

# set up go environment
hook global BufSetOption filetype=go %{
    set-option buffer formatcmd 'gofmt'
    set-option buffer makecmd 'go build'
    hook buffer BufWritePost .* %{ format }
    #hook buffer InsertEnd .* %{ lint }
    #hook buffer NormalIdle .* %{ lint }
}

###########
# PLUGINS #
###########

# use plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "occivink/kakoune-expand"

plug "delapouite/kakoune-mirror" %{
    # Suggested mapping: use ' to get into mirror mode
    map global normal "'" ': enter-user-mode -lock mirror<ret>'
}

# clipboard integration
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}

plug "TeddyDD/kakoune-selenized" domain "GitHub.com" theme

plug "vbauerster/second-light" domain "GitHub.com" theme

plug "AprilArcus/base16-kakoune" domain "GitHub.com" theme

plug "andreyorst/smarttab.kak" %{
    hook global WinSetOption filetype=(c|verilog|sh) noexpandtab
    hook global WinSetOption filetype=(python|java|html) expandtab
}

#plug "kak-lsp/kak-lsp" do %{
#    cargo install --locked --force --path .
#} # Installed via distribution package management
eval %sh{kak-lsp --kakoune -s $kak_session}  # Not needed if you load it with plug.kak.
hook global WinSetOption filetype=(python|go|latex|c|cpp) %{
    lsp-enable-window
    lsp-auto-hover-enable
    # format buffer on write
    #hook window BufWritePre .* lsp-formatting-sync
    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'
    set global lsp_auto_highlight_references true
}

plug "jjk96/kakoune-rainbow"

plug "tmahlburg/kakoune-verilog"

plug "greenfork/active-window.kak"

# called via woc
plug "ftonneau/wordcount.kak"

plug 'casonadams/insert-indicator'
